package MDIView;

import DAO.ThanhVienDAO;
import JDBCHelper.DatabaseConnection;
import Model.DangKy;
import Model.ThongKe;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;

/**
 *
 * @author xuant
 */
public class Reporter extends javax.swing.JPanel {

    public Reporter() {
        initComponents();
        setDateToChart();
        createPieChart();
    }

    private void setDateToChart() {
        List<DangKy> list = ThanhVienDAO.getDangKy();
        if (list != null) {
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for (DangKy item : list) {
                dataset.addValue(item.getSoLuong(), "Thành viên", item.getThang() + "");
            }

            JFreeChart chart = ChartFactory.createBarChart("THỐNG KÊ SỐ LƯỢNG THÀNH VIÊN ĐĂNG KÝ",
                    "Tháng", "Số lượng", dataset);
            ChartPanel chartPanel = new ChartPanel(chart);
            chartPanel.setPreferredSize(new Dimension(jpnDangKy.getWidth(), 280));
            jpnDangKy.removeAll();
            jpnDangKy.setLayout(new CardLayout());
            jpnDangKy.add(chartPanel);
            jpnDangKy.validate();
            jpnDangKy.repaint();
        }
    }

    private void createPieChart() {
        JFreeChart pieChart = createChart(createDataset());
        ChartPanel chartPanel = new ChartPanel(pieChart);
         final PieSectionLabelGenerator labelGenerator  = new StandardPieSectionLabelGenerator("{0} = {2}");
         final PiePlot piePlot = (PiePlot) pieChart.getPlot();
         piePlot.setLabelGenerator(labelGenerator);
        jpnSoLuong.setLayout(new BorderLayout());
        jpnSoLuong.add(chartPanel);
    }

    private JFreeChart createChart(PieDataset dataset) {
        JFreeChart chart = ChartFactory.createPieChart(
                "SỐ LƯỢNG BÀI THI THỰC HIỆN THEO CẤP ĐỘ", dataset, true, true, true);
        return chart;
    }

    private static PieDataset createDataset() {
        DefaultPieDataset dataset = new DefaultPieDataset();
        List<ThongKe> list = new ArrayList<ThongKe>();
        String sql = "exec Usp_ThongKeLevel";
        try (CallableStatement cs = DatabaseConnection.getDBConnection().prepareCall(sql);
                ResultSet rs = cs.executeQuery()) {
            int sum = 0;
            while (rs.next()) {
                list.add(new ThongKe(rs.getString("TenCD"), rs.getInt("SoKetQua")));
                sum += rs.getInt("SoKetQua");
            }
            for(ThongKe item: list){
                dataset.setValue(item.getTenCapDo(), Math.round((double)item.getSoLuong()/(double)sum * 100));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return dataset;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpnDangKy = new javax.swing.JPanel();
        jpnSoLuong = new javax.swing.JPanel();

        setMaximumSize(new java.awt.Dimension(751, 630));
        setMinimumSize(new java.awt.Dimension(750, 630));
        setPreferredSize(new java.awt.Dimension(770, 626));

        jpnDangKy.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jpnDangKyLayout = new javax.swing.GroupLayout(jpnDangKy);
        jpnDangKy.setLayout(jpnDangKyLayout);
        jpnDangKyLayout.setHorizontalGroup(
            jpnDangKyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 749, Short.MAX_VALUE)
        );
        jpnDangKyLayout.setVerticalGroup(
            jpnDangKyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 269, Short.MAX_VALUE)
        );

        jpnSoLuong.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jpnSoLuongLayout = new javax.swing.GroupLayout(jpnSoLuong);
        jpnSoLuong.setLayout(jpnSoLuongLayout);
        jpnSoLuongLayout.setHorizontalGroup(
            jpnSoLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 748, Short.MAX_VALUE)
        );
        jpnSoLuongLayout.setVerticalGroup(
            jpnSoLuongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 317, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpnDangKy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpnSoLuong, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpnDangKy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jpnSoLuong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jpnDangKy;
    private javax.swing.JPanel jpnSoLuong;
    // End of variables declaration//GEN-END:variables
}
